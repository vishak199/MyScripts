#!/opt/vertica/oss/python3/bin/python3

import argparse
import csv
from datetime import date, timedelta
import logging
from pprint import pprint
import json

import traceback
import sys

import vertica_python
import calendar


def get_args():
    """ Process arguments """
    parser = argparse.ArgumentParser(description='Generate 2.1D Report')            
    parser.add_argument('db', help='Database name')
    parser.add_argument('db_user', help='DB username')
    parser.add_argument('db_pass', help='DB password')
    parser.add_argument('query', help='Query')
    parser.add_argument('result_type', help='fetchone | fetchall')
    parser.add_argument('backup_servers', help='list of backup servers')
    return parser.parse_args()


def get_db_cursor(args):
    conn_info = {
        'host': args.backup_servers.strip().split(',')[0],
        'port': 5433,
        'user': args.db_user,
        'password': args.db_pass,
        'database': args.db,
        # autogenerated session label by default,
        # 'session_label': 'some_label',
        # default throw error on invalid UTF-8 results
        'unicode_error': 'strict',
        # SSL is disabled by default
        'ssl': False,
        # using server-side prepared statements is disabled by default
        'use_prepared_statements': False,
        # connection timeout is not enabled by default
        # 5 seconds timeout for a socket operation (Establishing a TCP connection or read/write operation)
        'connection_timeout': 300,
        'backup_server_node': args.backup_servers.strip().split(','),
    }

    connection  = vertica_python.connect(**conn_info)
    return connection


def execute_query(args):    
    print(f'Executing Query: {args.query}')

    connection = get_db_cursor(args)
    cursor = connection.cursor()
    cursor.execute(args.query)

    print('------RESULT-START------')
    if args.result_type == 'fetchone':
        res = cursor.fetchone()
        print(res[0])
    else:
        res = cursor.fetchall()
        for row in res:            
            print('|#|'.join(str(val).replace('\n', ' ') if val else '<EMPTY>' for val in row))                        
    print('------RESULT-END------')



def main():    
    args = get_args()
    execute_query(args)
    

if __name__ == '__main__':
    main()